---
import Button from "./Button.astro";
import ButtonOutline from "./ButtonOutline.astro";

const { type, price, features, textButton, href } = Astro.props;
---

<div
  class="flex flex-col py-[40px] px-[30px] border border-gray-light rounded-lg gap-y-[10px] w-[375px] card"
>
  <p class="text-noto-sk text-2xl font-medium">{type}</p>
  <p class="text-noto-sk text-3xl font-bold">{price}</p>
  <div class="flex flex-col gap-y-[20px] my-[40px]">
    {
      features.map((feature: string) => (
        <p class="text-noto-sk text-xl text-gray-text">
          <span class="font-bold text-primary px-[10px]">âœ“</span> {feature}
        </p>
      ))
    }
  </div>
  {
    type === "Pro" ? (
      <Button text={textButton} href={href} />
    ) : (
      <ButtonOutline text={textButton} href={href} />
    )
  }
</div>

<style>
  body.darkTheme p {
    color: var(--color-gray-light);
  }
  body.darkTheme .card > p {
    color: #ffffff;
  }
  @media (max-width: 1024px) {
    .card {
      max-width: 300px;
      padding-left: 15px;
      padding-right: 15px;
    }
    .card > div > p {
      font-size: 18px;
      width: 98%;
    }
  }
  .card {
    position: relative;
    overflow: hidden;
    place-content: center;
    place-items: center;
  }
  .card > p,
  .card > div,
  .card > a {
    z-index: 1;
  }
  .card::before {
    content: "";
    position: absolute;
    width: 100px;
    background-image: linear-gradient(
      180deg,
      rgb(0, 183, 255),
      rgb(255, 48, 255)
    );
    height: 130%;
    animation: rotBGimg 3s linear infinite;
    transition: all 0.2s linear;
  }

  @keyframes rotBGimg {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }

  .card::after {
    content: "";
    position: absolute;
    background: #efefef;
    inset: 5px;
    border-radius: 15px;
  }
  body.darkTheme .card::after {
    content: "";
    position: absolute;
    background: #000000;
    inset: 5px;
    border-radius: 15px;
  }
</style>
